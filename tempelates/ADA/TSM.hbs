<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Courses - Floklore</title>
    <link rel="stylesheet" href="/css/ADA.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header>
        <div class="header-logo" style="display: flex; align-items: center; gap: 10px;">
            <i class="fa-duotone fa-solid fa-hat-cowboy" style="--fa-primary-color:  hsl(220, 6%, 90%); --fa-secondary-color:  hsl(220, 6%, 90%); font-size: 2.5rem; color:  hsl(220, 6%, 90%);"></i>
            <div class="logo" style="font-size: 2rem; font-weight: bold; color: hsl(220, 6%, 90%); font-family: 'Arial', sans-serif;">Floklore</div>
        </div>
        <nav>
            <ul>
                <li><a href="/index">Home</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/contact">Contact Us</a></li>
            </ul>
        </nav>
    </header>
    <main>
        
        <h1>Travelling Salesman Problem</h1>
            <p>The Travelling Salesman Problem (TSP) is a classic optimization problem in mathematics and computer science. It involves finding the most efficient route for a salesman to visit a set of cities, starting and ending at the same city, while visiting each city exactly onc</p>
        <h2>Problem Description:</h2>
        <b>1. Input:</b>
        <ul>
            
            <li>A set of N cities.</li>
            <li>The distances or costs between each pair of cities.</li>
        </ul>
        <b>2. Output: </b>
        <ul>
            <li>The shortest possible route that visits each city exactly once and returns to the starting city.</li>
        </ul>
        <h2>Application:</h2>
        <ul>
            <li><b>Logistics:</b> routes for vehicles.</li>
            <li><b>Manufacturing:</b> Optimizing toolpath movements in a factory.</li>
            <li><b>Tourism:</b> Planning itineraries for travelers.</li>
            <li><b>Computer Networks::</b> Minimizing latency in routing data.</li>
        </ul>
        <h2>How does Travelling Salesman Problem  Work?</h2>
        <p>Consider the following graph with six cities and the distances between them −        </p>
            <img src="/images/TSM1.jpg" alt="Centerd Image" />
        <p>From the given graph, since the origin is already mentioned, the solution must always start from that node. Among the edges leading from A, A → B has the shortest distance.</p>
            <img src="/images/TSM2.jpg" alt="Centerd Image" />
        <p>Then, B → C has the shortest and only edge between, therefore it is included in the output graph.</p>
            <img src="/images/TSM3.jpg" alt="Centerd Image" />
            <p>There’s only one edge between C → D, therefore it is added to the output graph.</p>
            <img src="/images/TSM4.jpg" alt="Centerd Image" />
            <p>There’s two outward edges from D. Even though, D → B has lower distance than D → E, B is already visited once and it would form a cycle if added to the output graph. Therefore, D → E is added into the output graph.</p>
            <img src="/images/TSM5.jpg" alt="Centerd Image" />
            <p>There’s only one edge from e, that is E → F. Therefore, it is added into the output graph.</p>
            <img src="/images/TSM6.jpg" alt="Centerd Image" />
            <p>Again, even though F → C has lower distance than F → A, F → A is added into the output graph in order to avoid the cycle that would form and C is already visited once.</p>
            <img src="/images/TSM7.jpg" alt="Centerd Image" />
            <p>The shortest path that originates and ends at A is A → B → C → D → E → F → A</p>
            <p>The cost of the path is: 16 + 21 + 12 + 15 + 16 + 34 = 114.        </p>
        <h2>Complexity Analysis of  :</h2>
        <ul>
            <li><b>Time Complexity: </b> O(n² * 2^n)</li>
            <li><b>Auxiliary Complexity: </b>O(n⋅2^n)</li>
        </ul>   
        <p>Below is the implementation of the above approach:</p>
        <div class="code-container">
            <code>
                # Python program to find the shortest possible route
                #include <stdio.h>
                    int tsp_g[10][10] = {
                       {12, 30, 33, 10, 45},
                       {56, 22, 9, 15, 18},
                       {29, 13, 8, 5, 12},
                       {33, 28, 16, 10, 3},
                       {1, 4, 30, 24, 20}
                    };
                    int visited[10], n, cost = 0;
                    
                    /* creating a function to generate the shortest path */
                    void travellingsalesman(int c){
                       int k, adj_vertex = 999;
                       int min = 999;
                       
                       /* marking the vertices visited in an assigned array */
                       visited[c] = 1;
                       
                       /* displaying the shortest path */
                       printf("%d ", c + 1);
                       
                       /* checking the minimum cost edge in the graph */
                       for(k = 0; k < n; k++) {
                          if((tsp_g[c][k] != 0) && (visited[k] == 0)) {
                             if(tsp_g[c][k] < min) {
                                min = tsp_g[c][k];
                                adj_vertex = k;
                             }
                          }
                       }
                       if(min != 999) {
                          cost = cost + min;
                       }
                       if(adj_vertex == 999) {
                          adj_vertex = 0;
                          printf("%d", adj_vertex + 1);
                          cost = cost + tsp_g[c][adj_vertex];
                          return;
                       }
                       travellingsalesman(adj_vertex);
                    }
                    
                    /* main function */
                    int main(){
                       int i, j;
                       n = 5;
                       for(i = 0; i < n; i++) {
                          visited[i] = 0;
                       }
                       printf("Shortest Path: ");
                       travellingsalesman(0);
                       printf("\nMinimum Cost: ");
                       printf("%d\n", cost);
                       return 0;
                    }
        </code>
<p><b>Output: </b></p>
<li>Shortest Path: 1 4 5 2 3 1</li>
<li>Minimum Cost: 55</li>
        </div>             
        </body>    
        </div>
    </main>

    <div>

    </div>
    <footer>
        <p>&copy; 2024 Floklore - Empowering Minds</p>
    </footer>
</body>
</html>

